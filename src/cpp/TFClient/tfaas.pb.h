// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tfaas.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tfaas_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tfaas_2eproto

#include <limits>
#include <string>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_table_driven.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)
#include "google/protobuf/port_def.inc"
#define PROTOBUF_INTERNAL_EXPORT_tfaas_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tfaas_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tfaas_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_tfaas_2eproto_metadata_getter(int index);
namespace tfaaspb {
class Class;
struct ClassDefaultTypeInternal;
extern ClassDefaultTypeInternal _Class_default_instance_;
class DataFrame;
struct DataFrameDefaultTypeInternal;
extern DataFrameDefaultTypeInternal _DataFrame_default_instance_;
class Detector;
struct DetectorDefaultTypeInternal;
extern DetectorDefaultTypeInternal _Detector_default_instance_;
class Hits;
struct HitsDefaultTypeInternal;
extern HitsDefaultTypeInternal _Hits_default_instance_;
class Predictions;
struct PredictionsDefaultTypeInternal;
extern PredictionsDefaultTypeInternal _Predictions_default_instance_;
class Row;
struct RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
}  // namespace tfaaspb
PROTOBUF_NAMESPACE_OPEN
template<> ::tfaaspb::Class* Arena::CreateMaybeMessage<::tfaaspb::Class>(Arena*);
template<> ::tfaaspb::DataFrame* Arena::CreateMaybeMessage<::tfaaspb::DataFrame>(Arena*);
template<> ::tfaaspb::Detector* Arena::CreateMaybeMessage<::tfaaspb::Detector>(Arena*);
template<> ::tfaaspb::Hits* Arena::CreateMaybeMessage<::tfaaspb::Hits>(Arena*);
template<> ::tfaaspb::Predictions* Arena::CreateMaybeMessage<::tfaaspb::Predictions>(Arena*);
template<> ::tfaaspb::Row* Arena::CreateMaybeMessage<::tfaaspb::Row>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tfaaspb {

// ===================================================================

class Detector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Detector) */ {
 public:
  inline Detector() : Detector(nullptr) {}
  virtual ~Detector();
  explicit constexpr Detector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detector(const Detector& from);
  Detector(Detector&& from) noexcept
    : Detector() {
    *this = ::std::move(from);
  }

  inline Detector& operator=(const Detector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detector& operator=(Detector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detector* internal_default_instance() {
    return reinterpret_cast<const Detector*>(
               &_Detector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Detector& a, Detector& b) {
    a.Swap(&b);
  }
  inline void Swap(Detector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detector* New() const final {
    return CreateMaybeMessage<Detector>(nullptr);
  }

  Detector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detector& from);
  void MergeFrom(const Detector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tfaaspb.Detector";
  }
  protected:
  explicit Detector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tfaas_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated float x = 2;
  int x_size() const;
  private:
  int _internal_x_size() const;
  public:
  void clear_x();
  private:
  float _internal_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x() const;
  void _internal_add_x(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x();
  public:
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x();

  // repeated float y = 3;
  int y_size() const;
  private:
  int _internal_y_size() const;
  public:
  void clear_y();
  private:
  float _internal_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y() const;
  void _internal_add_y(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y();
  public:
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y();

  // repeated float z = 4;
  int z_size() const;
  private:
  int _internal_z_size() const;
  public:
  void clear_z();
  private:
  float _internal_z(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_z() const;
  void _internal_add_z(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_z();
  public:
  float z(int index) const;
  void set_z(int index, float value);
  void add_z(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      z() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_z();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tfaaspb.Detector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x_;
  mutable std::atomic<int> _x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y_;
  mutable std::atomic<int> _y_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > z_;
  mutable std::atomic<int> _z_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tfaas_2eproto;
};
// -------------------------------------------------------------------

class Hits PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Hits) */ {
 public:
  inline Hits() : Hits(nullptr) {}
  virtual ~Hits();
  explicit constexpr Hits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hits(const Hits& from);
  Hits(Hits&& from) noexcept
    : Hits() {
    *this = ::std::move(from);
  }

  inline Hits& operator=(const Hits& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hits& operator=(Hits&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hits& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hits* internal_default_instance() {
    return reinterpret_cast<const Hits*>(
               &_Hits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Hits& a, Hits& b) {
    a.Swap(&b);
  }
  inline void Swap(Hits* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hits* New() const final {
    return CreateMaybeMessage<Hits>(nullptr);
  }

  Hits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hits& from);
  void MergeFrom(const Hits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tfaaspb.Hits";
  }
  protected:
  explicit Hits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tfaas_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetFieldNumber = 1,
  };
  // repeated .tfaaspb.Detector det = 1;
  int det_size() const;
  private:
  int _internal_det_size() const;
  public:
  void clear_det();
  ::tfaaspb::Detector* mutable_det(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Detector >*
      mutable_det();
  private:
  const ::tfaaspb::Detector& _internal_det(int index) const;
  ::tfaaspb::Detector* _internal_add_det();
  public:
  const ::tfaaspb::Detector& det(int index) const;
  ::tfaaspb::Detector* add_det();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Detector >&
      det() const;

  // @@protoc_insertion_point(class_scope:tfaaspb.Hits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Detector > det_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tfaas_2eproto;
};
// -------------------------------------------------------------------

class Row PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  virtual ~Row();
  explicit constexpr Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const final {
    return CreateMaybeMessage<Row>(nullptr);
  }

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tfaaspb.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tfaas_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kModelFieldNumber = 3,
  };
  // repeated string key = 1;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  const std::string& key(int index) const;
  std::string* mutable_key(int index);
  void set_key(int index, const std::string& value);
  void set_key(int index, std::string&& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  std::string* add_key();
  void add_key(const std::string& value);
  void add_key(std::string&& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key();
  private:
  const std::string& _internal_key(int index) const;
  std::string* _internal_add_key();
  public:

  // repeated float value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // string model = 3;
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:tfaaspb.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tfaas_2eproto;
};
// -------------------------------------------------------------------

class DataFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tfaaspb.DataFrame) */ {
 public:
  inline DataFrame() : DataFrame(nullptr) {}
  virtual ~DataFrame();
  explicit constexpr DataFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataFrame(const DataFrame& from);
  DataFrame(DataFrame&& from) noexcept
    : DataFrame() {
    *this = ::std::move(from);
  }

  inline DataFrame& operator=(const DataFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataFrame& operator=(DataFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataFrame* internal_default_instance() {
    return reinterpret_cast<const DataFrame*>(
               &_DataFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataFrame& a, DataFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(DataFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataFrame* New() const final {
    return CreateMaybeMessage<DataFrame>(nullptr);
  }

  DataFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataFrame& from);
  void MergeFrom(const DataFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tfaaspb.DataFrame";
  }
  protected:
  explicit DataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tfaas_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
  };
  // repeated .tfaaspb.Row row = 1;
  int row_size() const;
  private:
  int _internal_row_size() const;
  public:
  void clear_row();
  ::tfaaspb::Row* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Row >*
      mutable_row();
  private:
  const ::tfaaspb::Row& _internal_row(int index) const;
  ::tfaaspb::Row* _internal_add_row();
  public:
  const ::tfaaspb::Row& row(int index) const;
  ::tfaaspb::Row* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Row >&
      row() const;

  // @@protoc_insertion_point(class_scope:tfaaspb.DataFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Row > row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tfaas_2eproto;
};
// -------------------------------------------------------------------

class Class PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Class) */ {
 public:
  inline Class() : Class(nullptr) {}
  virtual ~Class();
  explicit constexpr Class(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Class(const Class& from);
  Class(Class&& from) noexcept
    : Class() {
    *this = ::std::move(from);
  }

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }
  inline Class& operator=(Class&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Class& default_instance() {
    return *internal_default_instance();
  }
  static inline const Class* internal_default_instance() {
    return reinterpret_cast<const Class*>(
               &_Class_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Class& a, Class& b) {
    a.Swap(&b);
  }
  inline void Swap(Class* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Class* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Class* New() const final {
    return CreateMaybeMessage<Class>(nullptr);
  }

  Class* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Class>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Class& from);
  void MergeFrom(const Class& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Class* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tfaaspb.Class";
  }
  protected:
  explicit Class(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tfaas_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kProbabilityFieldNumber = 2,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // float probability = 2;
  void clear_probability();
  float probability() const;
  void set_probability(float value);
  private:
  float _internal_probability() const;
  void _internal_set_probability(float value);
  public:

  // @@protoc_insertion_point(class_scope:tfaaspb.Class)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  float probability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tfaas_2eproto;
};
// -------------------------------------------------------------------

class Predictions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Predictions) */ {
 public:
  inline Predictions() : Predictions(nullptr) {}
  virtual ~Predictions();
  explicit constexpr Predictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Predictions(const Predictions& from);
  Predictions(Predictions&& from) noexcept
    : Predictions() {
    *this = ::std::move(from);
  }

  inline Predictions& operator=(const Predictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Predictions& operator=(Predictions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Predictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Predictions* internal_default_instance() {
    return reinterpret_cast<const Predictions*>(
               &_Predictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Predictions& a, Predictions& b) {
    a.Swap(&b);
  }
  inline void Swap(Predictions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Predictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Predictions* New() const final {
    return CreateMaybeMessage<Predictions>(nullptr);
  }

  Predictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Predictions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Predictions& from);
  void MergeFrom(const Predictions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Predictions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tfaaspb.Predictions";
  }
  protected:
  explicit Predictions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_tfaas_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionFieldNumber = 1,
  };
  // repeated .tfaaspb.Class prediction = 1;
  int prediction_size() const;
  private:
  int _internal_prediction_size() const;
  public:
  void clear_prediction();
  ::tfaaspb::Class* mutable_prediction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Class >*
      mutable_prediction();
  private:
  const ::tfaaspb::Class& _internal_prediction(int index) const;
  ::tfaaspb::Class* _internal_add_prediction();
  public:
  const ::tfaaspb::Class& prediction(int index) const;
  ::tfaaspb::Class* add_prediction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Class >&
      prediction() const;

  // @@protoc_insertion_point(class_scope:tfaaspb.Predictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Class > prediction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tfaas_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Detector

// string name = 1;
inline void Detector::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Detector::name() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Detector.name)
  return _internal_name();
}
inline void Detector::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tfaaspb.Detector.name)
}
inline std::string* Detector::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Detector.name)
  return _internal_mutable_name();
}
inline const std::string& Detector::_internal_name() const {
  return name_.Get();
}
inline void Detector::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Detector::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tfaaspb.Detector.name)
}
inline void Detector::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tfaaspb.Detector.name)
}
inline void Detector::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tfaaspb.Detector.name)
}
inline std::string* Detector::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Detector::release_name() {
  // @@protoc_insertion_point(field_release:tfaaspb.Detector.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Detector::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tfaaspb.Detector.name)
}

// repeated float x = 2;
inline int Detector::_internal_x_size() const {
  return x_.size();
}
inline int Detector::x_size() const {
  return _internal_x_size();
}
inline void Detector::clear_x() {
  x_.Clear();
}
inline float Detector::_internal_x(int index) const {
  return x_.Get(index);
}
inline float Detector::x(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Detector.x)
  return _internal_x(index);
}
inline void Detector::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:tfaaspb.Detector.x)
}
inline void Detector::_internal_add_x(float value) {
  x_.Add(value);
}
inline void Detector::add_x(float value) {
  _internal_add_x(value);
  // @@protoc_insertion_point(field_add:tfaaspb.Detector.x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detector::_internal_x() const {
  return x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detector::x() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Detector.x)
  return _internal_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detector::_internal_mutable_x() {
  return &x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detector::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Detector.x)
  return _internal_mutable_x();
}

// repeated float y = 3;
inline int Detector::_internal_y_size() const {
  return y_.size();
}
inline int Detector::y_size() const {
  return _internal_y_size();
}
inline void Detector::clear_y() {
  y_.Clear();
}
inline float Detector::_internal_y(int index) const {
  return y_.Get(index);
}
inline float Detector::y(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Detector.y)
  return _internal_y(index);
}
inline void Detector::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:tfaaspb.Detector.y)
}
inline void Detector::_internal_add_y(float value) {
  y_.Add(value);
}
inline void Detector::add_y(float value) {
  _internal_add_y(value);
  // @@protoc_insertion_point(field_add:tfaaspb.Detector.y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detector::_internal_y() const {
  return y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detector::y() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Detector.y)
  return _internal_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detector::_internal_mutable_y() {
  return &y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detector::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Detector.y)
  return _internal_mutable_y();
}

// repeated float z = 4;
inline int Detector::_internal_z_size() const {
  return z_.size();
}
inline int Detector::z_size() const {
  return _internal_z_size();
}
inline void Detector::clear_z() {
  z_.Clear();
}
inline float Detector::_internal_z(int index) const {
  return z_.Get(index);
}
inline float Detector::z(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Detector.z)
  return _internal_z(index);
}
inline void Detector::set_z(int index, float value) {
  z_.Set(index, value);
  // @@protoc_insertion_point(field_set:tfaaspb.Detector.z)
}
inline void Detector::_internal_add_z(float value) {
  z_.Add(value);
}
inline void Detector::add_z(float value) {
  _internal_add_z(value);
  // @@protoc_insertion_point(field_add:tfaaspb.Detector.z)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detector::_internal_z() const {
  return z_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detector::z() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Detector.z)
  return _internal_z();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detector::_internal_mutable_z() {
  return &z_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detector::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Detector.z)
  return _internal_mutable_z();
}

// -------------------------------------------------------------------

// Hits

// repeated .tfaaspb.Detector det = 1;
inline int Hits::_internal_det_size() const {
  return det_.size();
}
inline int Hits::det_size() const {
  return _internal_det_size();
}
inline void Hits::clear_det() {
  det_.Clear();
}
inline ::tfaaspb::Detector* Hits::mutable_det(int index) {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Hits.det)
  return det_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Detector >*
Hits::mutable_det() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Hits.det)
  return &det_;
}
inline const ::tfaaspb::Detector& Hits::_internal_det(int index) const {
  return det_.Get(index);
}
inline const ::tfaaspb::Detector& Hits::det(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Hits.det)
  return _internal_det(index);
}
inline ::tfaaspb::Detector* Hits::_internal_add_det() {
  return det_.Add();
}
inline ::tfaaspb::Detector* Hits::add_det() {
  // @@protoc_insertion_point(field_add:tfaaspb.Hits.det)
  return _internal_add_det();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Detector >&
Hits::det() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Hits.det)
  return det_;
}

// -------------------------------------------------------------------

// Row

// repeated string key = 1;
inline int Row::_internal_key_size() const {
  return key_.size();
}
inline int Row::key_size() const {
  return _internal_key_size();
}
inline void Row::clear_key() {
  key_.Clear();
}
inline std::string* Row::add_key() {
  // @@protoc_insertion_point(field_add_mutable:tfaaspb.Row.key)
  return _internal_add_key();
}
inline const std::string& Row::_internal_key(int index) const {
  return key_.Get(index);
}
inline const std::string& Row::key(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Row.key)
  return _internal_key(index);
}
inline std::string* Row::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Row.key)
  return key_.Mutable(index);
}
inline void Row::set_key(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tfaaspb.Row.key)
  key_.Mutable(index)->assign(value);
}
inline void Row::set_key(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tfaaspb.Row.key)
  key_.Mutable(index)->assign(std::move(value));
}
inline void Row::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tfaaspb.Row.key)
}
inline void Row::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tfaaspb.Row.key)
}
inline std::string* Row::_internal_add_key() {
  return key_.Add();
}
inline void Row::add_key(const std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tfaaspb.Row.key)
}
inline void Row::add_key(std::string&& value) {
  key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tfaaspb.Row.key)
}
inline void Row::add_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tfaaspb.Row.key)
}
inline void Row::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tfaaspb.Row.key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Row::key() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Row.key)
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Row::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Row.key)
  return &key_;
}

// repeated float value = 2;
inline int Row::_internal_value_size() const {
  return value_.size();
}
inline int Row::value_size() const {
  return _internal_value_size();
}
inline void Row::clear_value() {
  value_.Clear();
}
inline float Row::_internal_value(int index) const {
  return value_.Get(index);
}
inline float Row::value(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Row.value)
  return _internal_value(index);
}
inline void Row::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tfaaspb.Row.value)
}
inline void Row::_internal_add_value(float value) {
  value_.Add(value);
}
inline void Row::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:tfaaspb.Row.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Row::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Row::value() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Row.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Row::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Row::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Row.value)
  return _internal_mutable_value();
}

// string model = 3;
inline void Row::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& Row::model() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Row.model)
  return _internal_model();
}
inline void Row::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:tfaaspb.Row.model)
}
inline std::string* Row::mutable_model() {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Row.model)
  return _internal_mutable_model();
}
inline const std::string& Row::_internal_model() const {
  return model_.Get();
}
inline void Row::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Row::set_model(std::string&& value) {
  
  model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tfaaspb.Row.model)
}
inline void Row::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tfaaspb.Row.model)
}
inline void Row::set_model(const char* value,
    size_t size) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tfaaspb.Row.model)
}
inline std::string* Row::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Row::release_model() {
  // @@protoc_insertion_point(field_release:tfaaspb.Row.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Row::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tfaaspb.Row.model)
}

// -------------------------------------------------------------------

// DataFrame

// repeated .tfaaspb.Row row = 1;
inline int DataFrame::_internal_row_size() const {
  return row_.size();
}
inline int DataFrame::row_size() const {
  return _internal_row_size();
}
inline void DataFrame::clear_row() {
  row_.Clear();
}
inline ::tfaaspb::Row* DataFrame::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:tfaaspb.DataFrame.row)
  return row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Row >*
DataFrame::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.DataFrame.row)
  return &row_;
}
inline const ::tfaaspb::Row& DataFrame::_internal_row(int index) const {
  return row_.Get(index);
}
inline const ::tfaaspb::Row& DataFrame::row(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.DataFrame.row)
  return _internal_row(index);
}
inline ::tfaaspb::Row* DataFrame::_internal_add_row() {
  return row_.Add();
}
inline ::tfaaspb::Row* DataFrame::add_row() {
  // @@protoc_insertion_point(field_add:tfaaspb.DataFrame.row)
  return _internal_add_row();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Row >&
DataFrame::row() const {
  // @@protoc_insertion_point(field_list:tfaaspb.DataFrame.row)
  return row_;
}

// -------------------------------------------------------------------

// Class

// string label = 1;
inline void Class::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& Class::label() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Class.label)
  return _internal_label();
}
inline void Class::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:tfaaspb.Class.label)
}
inline std::string* Class::mutable_label() {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Class.label)
  return _internal_mutable_label();
}
inline const std::string& Class::_internal_label() const {
  return label_.Get();
}
inline void Class::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Class::set_label(std::string&& value) {
  
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tfaaspb.Class.label)
}
inline void Class::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tfaaspb.Class.label)
}
inline void Class::set_label(const char* value,
    size_t size) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tfaaspb.Class.label)
}
inline std::string* Class::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Class::release_label() {
  // @@protoc_insertion_point(field_release:tfaaspb.Class.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Class::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tfaaspb.Class.label)
}

// float probability = 2;
inline void Class::clear_probability() {
  probability_ = 0;
}
inline float Class::_internal_probability() const {
  return probability_;
}
inline float Class::probability() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Class.probability)
  return _internal_probability();
}
inline void Class::_internal_set_probability(float value) {
  
  probability_ = value;
}
inline void Class::set_probability(float value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:tfaaspb.Class.probability)
}

// -------------------------------------------------------------------

// Predictions

// repeated .tfaaspb.Class prediction = 1;
inline int Predictions::_internal_prediction_size() const {
  return prediction_.size();
}
inline int Predictions::prediction_size() const {
  return _internal_prediction_size();
}
inline void Predictions::clear_prediction() {
  prediction_.Clear();
}
inline ::tfaaspb::Class* Predictions::mutable_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Predictions.prediction)
  return prediction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Class >*
Predictions::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Predictions.prediction)
  return &prediction_;
}
inline const ::tfaaspb::Class& Predictions::_internal_prediction(int index) const {
  return prediction_.Get(index);
}
inline const ::tfaaspb::Class& Predictions::prediction(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Predictions.prediction)
  return _internal_prediction(index);
}
inline ::tfaaspb::Class* Predictions::_internal_add_prediction() {
  return prediction_.Add();
}
inline ::tfaaspb::Class* Predictions::add_prediction() {
  // @@protoc_insertion_point(field_add:tfaaspb.Predictions.prediction)
  return _internal_add_prediction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tfaaspb::Class >&
Predictions::prediction() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Predictions.prediction)
  return prediction_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tfaaspb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tfaas_2eproto
